---
title: "Pr√†ctica 02: Implementaci√≥ d'una minishell ohmy_shell en C"
lang: ca
---


La `ohmy_shell` √©s una minishell escrita en C que simula el comportament b√†sic d‚Äôuna shell Unix. Es tracta d‚Äôun projecte cl√†ssic en molts cursos de Sistemes Operatius arreu del m√≥n. Per tant, √©s possible trobar implementacions similars a Internet, i fins i tot la intel¬∑lig√®ncia artificial pot generar codi per ajudar-vos. Tot i aix√≠, implementar-la vosaltres mateixos us permetr√† entendre el funcionament intern d‚Äôuna shell real com `bash` o `zsh`.

L‚Äôobjectiu √©s escriure la vostra pr√≤pia shell interactiva, gestionant manualment la mem√≤ria, el comportament dels operadors i la resposta davant errors. **Acceptes el repte?**

Per comen√ßar, heu d‚Äôacceptar l‚Äôactivitat del GitHub Classroom heu d'accedir a l'enlla√ß seg√ºent: [Github Classroom](https://classroom.github.com/a/BuV7H_En). Un cop acceptada, el primer membre del grup assignar√† un nom a l‚Äôequip i la resta de membres s‚Äôhi podran unir. Despr√©s, cada membre haur√† de clonar el repositori al seu entorn local.

## üéØ Objectius

- Comprendre la creaci√≥ i gesti√≥ de processos en entorns Unix mitjan√ßant `fork()`, `exec*()`, `pipe()`, `dup2()`, `waitpid()`, `open()`, `close()`.
- Recon√®ixer i programar l‚Äô√∫s de descriptors de fitxer, pipes, redireccions i operadors l√≤gics.
- Desenvolupar la gesti√≥ de senyals (SIGINT: Ctrl+C, SIGCHLD: reaprofitar processos fill).
- Implementar parsing: seq√º√®ncia, pipes, condicions, execuci√≥ en background.
- Evitar fugues de mem√≤ria i descriptors oberts.
- Diferenciar entre comandes internes (*built-ins*) i externes.

## üõ†Ô∏è Entorn de Desenvolupament

- Llenguatge de programaci√≥: C (est√†ndard C99 o superior).
- Compilador: `gcc`.
- Eina de construcci√≥: `make`.
- VM amb Debian.

## üóÇÔ∏è Estructura del Projecte

La seg√ºent √©s l'estructura b√†sica del projecte:

```bash
‚îú‚îÄ‚îÄ build            
‚îú‚îÄ‚îÄ include           
‚îÇ   ‚îú‚îÄ‚îÄ helpers.h
‚îÇ   ‚îî‚îÄ‚îÄ log.h
‚îú‚îÄ‚îÄ Makefile          
‚îú‚îÄ‚îÄ README.md                  
‚îú‚îÄ‚îÄ src  
‚îÇ   ‚îú‚îÄ‚îÄ helpers.c
‚îÇ   ‚îú‚îÄ‚îÄ log.c
‚îÇ   ‚îî‚îÄ‚îÄ ohmy_shell.c                       

```

La llibreria helpers cont√© una implementaci√≥ b√†sica de funcions √∫tils com la lectura i divisi√≥ de l√≠nies o la validaci√≥ de car√†cters. Podeu modificar-les o ampliar-les si cal, sempre amb justificaci√≥. **No es pot canviar el tipus de retorn ni els par√†metres de les funcions existents.**

## üìú Tasques a realitzar

### 1. Modes d'entrada: interactiu i no interactiu

Una shell ha de suportar dos modes d'entrada: interactiu i no interactiu.

- **Mode interactiu**: La shell mostra un prompt (`ohmy_shell>`) i espera que l'usuari introdueixi comandes. Despr√©s d'executar cada comanda, torna a mostrar el prompt. Aquesta `shell` **√∫nicament ha de sortir quan l'usuari introdueixi la comanda `exit`** o quan rebi un senyal d'aturada (com `Ctrl+D`) o la senyal `SIGKILL`.

  ```bash
  ./ohmy_shell
  ohmy_shell> echo hola
  hola
  ohmy_shell> pwd
  /home/usuari
  ohmy_shell> exit
  ```

- **Mode no interactiu**: La shell rep una comanda com a argument i l'executa directament sense mostrar cap prompt. Despr√©s d'executar la comanda, la shell ha de sortir immediatament.

  ```bash
  ./ohmy_shell -c "echo hola"
  hola
  ```

### 2. Implementaci√≥ de comandes internes (built-ins)

Implementa les seg√ºents comandes internes sense crear nous processos:

- **`cd`**: Canvia el directori; nom√©s s‚Äôexecuta si rep exactament un argument v√†lid.
- **`pwd`**: Mostra el directori actual.
- **`help`**: Mostra ajuda.
- **`exit`**: Tanca la shell.
- **`history`**: Mostra l‚Äôhistorial (m√†xim 100 l√≠nies, FIFO).

Per implementar la comanda history, tens dues opcions:

1. **Opci√≥ b√†sica**: Emmagatzema les comandes en mem√≤ria utilitzant un punter a cadenes.
2. **Opci√≥ avan√ßada**: Emmagatzema les comandes en mem√≤ria mitjan√ßant una llista enlla√ßada.

En ambdues opcions, desa les comandes en un fitxer per mantenir-ne la persist√®ncia entre sessions (`.ohmy_history`) abans de sortir de la shell i carrega-les en iniciar-la.

### 2. Mode educatiu o debug

Implementa un mode educatiu que s'activi amb l'opci√≥ `-d` en iniciar la shell. En aquest mode, la shell ha de mostrar informaci√≥ detallada sobre cada pas de l'execuci√≥, permetent als usuaris comprendre millor el funcionament intern de la shell i facilitar la comprensi√≥ dels conceptes explicats en aquesta assignatura com `pipes`, `fork()`, `exec()`, `redireccions`, etc.

*Exemple*:
```bash
./ohmy_shell -d
12:00:00 DEBUG ohmy_shell.c:45: Starting shell in debug mode
ohmy_shell> ls -la
12:00:05 DEBUG ohmy_shell.c:78: Forking process for command 'ls -la'
12:00:05 DEBUG ohmy_shell.c:85: Executing command 'ls -la' with PID 12345
(total output of ls -la)
12:00:06 DEBUG ohmy_shell.c:95: Command 'ls -la' completed with exit status 0
ohmy_shell>
```

### 3. Gesti√≥ de processos i execuci√≥

La shell ha de ser capa√ß de crear nous processos per executar comandes externes. La shell ha de permetre gestionar comandes simples en *foreground* i *background*.

- **Comandes en foreground**: La shell ha d'esperar que la comanda acabi abans de tornar a mostrar el prompt.

  ```bash
  ohmy_shell> sleep 5
  (espera 5 segons)
  ohmy_shell>
  ```

- **Comandes en background**: Si una comanda acaba amb `&`, la shell ha de crear un proc√©s fill per executar la comanda en background i tornar immediatament el prompt a l'usuari sense esperar que la comanda acabi.

  ```bash
  ohmy_shell> sleep 10 &
  [1] 12345
  ohmy_shell>
  ```

- **Gesti√≥ d'operadors**: Implementa els operadors `&&`, `||` i `;` per permetre l'execuci√≥ condicional i seq√ºencial de comandes.

  ```bash
  ohmy_shell> mkdir test && cd test
  ohmy_shell> false || echo "La comanda ha fallat"
  La comanda ha fallat
  ohmy_shell> echo "Primera comanda"; echo "Segona comanda"
  Primera comanda
  Segona comanda
  ```

  **Nota**: La prioritat d'execuci√≥ dels operadors √©s la seg√ºent: `;` t√© la prioritat m√©s baixa, seguit de `&&` i `||` que tenen la mateixa prioritat i s'executen d'esquerra a dreta.

- **Gesti√≥ de senyals**: La shell ha de gestionar correctament les senyals `SIGINT` (Ctrl+C) i `SIGCHLD` per evitar processos zombis.

  - Quan l'usuari prem `Ctrl+C`, la shell ha de capturar la senyal i no tancar-se, sin√≥ que ha de mostrar el prompt novament.
  - Quan un proc√©s fill acaba, la shell ha de capturar la senyal `SIGCHLD` i reaprofitar el proc√©s fill per evitar processos zombis.

### 4. Pipes i Redireccions

La shell ha de suportar l'√∫s de pipes (`|`) per connectar la sortida d'una comanda amb l'entrada d'una altra, aix√≠ com redireccions d'entrada (`<`), sortida (`>`), i sortida en mode append (`>>`).

*Exemple*:
```bash
ohmy_shell> cat fitxer.txt | grep "cerca"
(Mostra l√≠nies del fitxer que contenen "cerca")
ohmy_shell> echo "hola" > out.txt
(La sortida s'escriu a 'out.txt')
ohmy_shell> echo "m√©s text" >> out.txt
(El text s'afegeix al final de 'out.txt')
ohmy_shell> sort < in.txt
(Mostra el contingut de 'in.txt' ordenat)
```

### 5. Variables d'entorn

La shell ha de permetre als usuaris establir i utilitzar variables d'entorn. Implementa la funcionalitat per assignar valors a variables i utilitzar-les en comandes.

*Exemple*:
```bash
ohmy_shell> MYVAR="Hola M√≥n"
ohmy_shell> echo $MYVAR
Hola M√≥n
```

Les variables d'entorn s'han de gestionar correctament, permetent als usuaris establir, modificar i eliminar variables segons sigui necessari. Aquestes variables s‚Äôhereten del proc√©s del proc√©s `bash` que ha iniciat l'aplicaci√≥ `ohmy_shell`. Les variables no definides es tractaran com a cadenes buides.

### 6. Comentaris a la l√≠nia de comandes

La shell ha de permetre als usuaris afegir comentaris a les l√≠nies de comandes utilitzant el car√†cter `#`. Tot el que segueixi al car√†cter `#` en una l√≠nia de comandes ha de ser ignorat per la shell.

### BONUS

Implementa almenys una de les seg√ºents funcionalitats addicionals per obtenir el bonus:

- Configuraci√≥ personalitzada del historial: Permet als usuaris configurar la mida m√†xima de l'historial i el fitxer on es desa.
  *Exemple*:
  ```bash
  ohmy_shell> set_history_size 200
  ohmy_shell> set_history_file ~/.my_custom_history
  ```

- Permetre l'√∫s de comandes compostes amb par√®ntesis per agrupar comandes i controlar l'ordre d'execuci√≥.
  *Exemple*:
  ```bash
  ohmy_shell> (echo "Inici"; ls -la; echo "Fi")
  Inici
  (sortida de ls -la)
  Fi
  ```

- Automatitza l‚Äôavaluaci√≥ de la teva shell mitjan√ßant un script de proves que verifiqui totes les funcionalitats implementades. L‚Äôscript pot ser senzill i comparar la sortida esperada amb la sortida real de la shell en diversos casos de prova.


## üíØ Avaluaci√≥ i Criteris de Qualitat

Per avaluar el projecte, es tindran en compte els seg√ºents aspectes:

| Aspecte                        | Puntuaci√≥ M√†xima |
|--------------------------------|------------------|
| `Core`                         | 40               |
| `Avan√ßada`                     | 30               |
| `Qualitat del codi`            | 20               |
| `Documentaci√≥`                 | 10               |
| `Bonus`                        | 10               |


- **Core**: inclou la implementaci√≥ d‚Äôuna shell capa√ß d‚Äôexecutar comandes simples, gestionar processos en foreground i background, implementar les comandes internes especificades, i gestionar redireccions i pipes.

- **Avan√ßada**: inclou l‚Äô√∫s d‚Äôoperadors l√≤gics (&&, ||, ;), variables d‚Äôentorn, comentaris, mode debug i historial de comandes.

- **Qualitat del codi**: s‚Äôutilitzar√† *Valgrind* i eines de linting per avaluar la qualitat del codi, assegurant que no hi hagi fugues de mem√≤ria, accessos fora de l√≠mits i que es segueixin les bones pr√†ctiques de programaci√≥ en C, com:

  - Net i ben estructurat, evitant funcions repetides o codi duplicat innecessari.
  - Comentat adequadament, amb noms de variables descriptius.
  - Documentat segons est√†ndards com Doxygen (opcional per√≤ recomanat).
  - √ös correcte i raonable del git amb commits clars i descriptius, gesti√≥ d‚Äôissues i generaci√≥ de release amb la versi√≥ final del projecte.

- **Bonus**: s‚Äôatorgar√† per la implementaci√≥ de funcionalitats addicionals com la configuraci√≥ personalitzada de l‚Äôhistorial o l‚Äô√∫s de comandes compostes amb par√®ntesis.

- **Documentaci√≥**: s‚Äôavaluar√† la professionalitat i el contingut del fitxer `README.md`:

  - Com compilar i executar el projecte.
  - Com utilitzar-lo amb exemples en format video o imatges.
  - Distribuci√≥ de tasques entre els membres de l‚Äôequip (si escau).
  - Disseny i arquitectura del projecte.

## üö´ Prohibicions

- No podeu utilitzar la funci√≥ `system()` per executar comandes externes, ni cap altre programa que realitzi la mateixa funci√≥. Tota pr√†ctica que no gestioni processos amb `fork()`, `exec()`, etc., ser√† considerada com a no realitzada.

- Qualsevol instrucci√≥ no vista a classe s‚Äôha de justificar. Si existeix alguna comanda vista a classe amb la mateixa finalitat i s‚Äôutilitza una altra, aix√≤ suposar√† una penalitzaci√≥ de la nota. Totes les funcions de `string.h` aix√≠ com de totes les llibreries que teniu incloses al projecte s√≥n permeses.


## üìÖ Planificaci√≥ i versions

| Entrega    | Versio | Contingut                                   |
|------------|--------|---------------------------------------------|
| 16-11-2025 | 1.0    | Implementaci√≥ b√†sica de la shell amb **built-in**, comandes simples |
| 23-11-2025 | 2.0    | Pipes, redireccions, background            |
| 30-11-2025 | 3.0    | Historial |
| 07-12-2025 | 4.0    | Operadors l√≤gics, variables d'entorn, comentaris, mode debug |

Aquesta pr√†ctica √©s extensa i complexa, per aix√≤ us recomano seguir la planificaci√≥ proposada. Si feu una petita entrega cada setmana, us podr√© oferir feedback i tindreu l‚Äôoportunitat de corregir possibles errors abans de la data final de lliurament. Aquesta opci√≥ √©s volunt√†ria; tamb√© podeu presentar la pr√†ctica completa al final, segons el vostre ritme de treball.

La nota d‚Äôaquesta pr√†ctica tindr√† un **pes doble** (ponderada per 2), ja que equival a dues pr√†ctiques en una i disposeu d‚Äôun mes per completar-la.

## ‚ùì Suport i Consultes

He creat un f√≤rum al Campus Virtual per resoldre dubtes i incid√®ncies relacionades amb aquesta pr√†ctica. Us demano que utilitzeu aquest canal per centralitzar les consultes i evitar duplicitats en preguntes i respostes. Tamb√© podeu ajudar a resoldre els dubtes dels companys: supervisar√© totes les aportacions i corregir√© qualsevol informaci√≥ incorrecta si cal. 

## üì¶ Lliurament

- Tot el projecte al repositori GitHub assignat.
- `make` ha de compilar sense errors ni warnings.
- S'avaluar√† nom√©s la branca principal (`main` o `master`). 

Per formalitzar el lliurament al Campus Virtual, copieu i enganxeu el text corresponent a la caixa de text de lliurament del Campus:

```text
Individual o Grupal: [Indicar si √©s Individual o Grupal]
<Si Grupal>
Membres: [Llista de Noms, incloent el teu]
Team: [Nom del Team al Classroom]
```

---
> Happy Coding! üöÄ


 



